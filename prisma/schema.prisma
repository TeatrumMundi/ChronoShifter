// Define database connection via the `DATABASE_URL` env var
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// Define custom output path for generated Prisma Client
generator client {
  provider = "prisma-client-js"
}

// Riot Account
model RiotAccount {
  id                        Int      @id @default(autoincrement())
  riotAccountDetailsPuuid   String @unique
  leagueAccountId           String?  @unique
  riotAccountDetails        RiotAccountDetails @relation(fields: [riotAccountDetailsPuuid], references: [puuid])
  leagueAccount             LeagueAccount?     @relation(fields: [leagueAccountId], references: [id])
  participants              Participant[]
}

model RiotAccountDetails {
  puuid       String   @id
  gameName   String
  tagLine     String
  riotAccount RiotAccount?
}

// League Account
model LeagueAccount {
  id                      String   @id @default(uuid())
  leagueAccountDetailsId  String   @unique
  leagueSoloRankId        String?
  leagueFlexRankId        String?
  leagueAccountDetails    LeagueAccountDetails @relation(fields: [leagueAccountDetailsId], references: [id])
  leagueSoloRank          LeagueRank? @relation("SoloRank", fields: [leagueSoloRankId], references: [id])
  leagueFlexRank          LeagueRank? @relation("FlexRank", fields: [leagueFlexRankId], references: [id])
  riotAccount             RiotAccount?
}

model LeagueAccountDetails {
  id            String   @id @default(uuid())
  accountId     String   @unique
  puuid         String   @unique
  region        String
  activeRegion  String
  profileIconId Int
  revisionDate  BigInt
  summonerLevel Int
  leagueAccount LeagueAccount?
}

model LeagueRank {
  id           String   @id @default(uuid())
  queueType    String
  tier         String
  rank         String
  leaguePoints Int
  wins         Int
  losses       Int
  winRate      Int
  hotStreak    Boolean
  soloAccount  LeagueAccount[] @relation("SoloRank")
  flexAccount  LeagueAccount[] @relation("FlexRank")
}

// Match
model Match {
  matchId           String   @id
  gameDuration      Int
  gameCreation      BigInt
  gameEndTimestamp  BigInt
  gameMode          String
  gameType          String
  queueId           Int
  
  // Relations
  participants      Participant[]
  timeline          MatchTimeline?
}

model Participant {
  // Unique identifier for the participant
  id                        String   @id @default(uuid())

  // Basic Info
  puuid                     String
  participantId             Int
  riotIdGameName            String
  riotIdTagline             String
  summonerName              String
  region                    String
  activeRegion              String

  // Team Info
  teamId                    Int
  teamPosition              String

  // Stats
  champLevel                Int
  kills                     Int
  deaths                    Int
  assists                   Int
  kda                       String

  // Minions Info
  totalMinionsKilled        Int
  neutralMinionsKilled      Int
  allMinionsKilled          Int
  minionsPerMinute          Float

  // Performance Stats
  visionScore               Int
  visionPerMinute           Float
  wardsPlaced               Int
  goldEarned                Int
  performanceScore          Float
  performancePlacement      Int
  totalHealsOnTeammates     Int
  totalDamageShieldedOnTeammates Int
  totalDamageTaken          Int
  totalDamageDealtToChampions Int
  individualPosition        String
  win                       Boolean
  
  // Match Info
  matchId                   String

  // Relations to League assets
  championId                String
  summonerSpell1Id          BigInt
  summonerSpell2Id          BigInt
  
  arenaStatsId              String? @unique
  
  // Relations
  match                     Match @relation(fields: [matchId], references: [matchId])
  riotAccount               RiotAccount? @relation(fields: [puuid], references: [riotAccountDetailsPuuid])
  champion                  Champion @relation(fields: [championId], references: [id])
  summonerSpell1            SummonerSpell @relation("SummonerSpell1", fields: [summonerSpell1Id], references: [id])
  summonerSpell2            SummonerSpell @relation("SummonerSpell2", fields: [summonerSpell2Id], references: [id])
  arenaStats                ArenaStats? @relation(fields: [arenaStatsId], references: [id])
  
  // Many-to-many relations for storing actual objects
  items                     ParticipantItem[]
  runes                     ParticipantRune[]
  statPerks                 ParticipantStatPerk[]
}

// Arena Stats table based on the ArenaStats interface
model ArenaStats {
  id                String   @id @default(uuid())
  placement         Int
  playerSubteamId   Int
  
  // Relations
  participant       Participant?
  augments          ArenaStatsAugment[]
}

// Junction tables for many-to-many relationships
model ParticipantItem {
  id              String      @id @default(uuid())
  participantId   String
  itemId          Int
  position        Int         // To maintain order of items (0-5)
  
  participant     Participant @relation(fields: [participantId], references: [id])
  item            Item        @relation(fields: [itemId], references: [id])
  
  @@unique([participantId, position])
}

model ParticipantRune {
  id              String      @id @default(uuid())
  participantId   String
  runeId          Int
  slot            Int         // To maintain rune structure
  
  participant     Participant @relation(fields: [participantId], references: [id])
  rune            Rune        @relation(fields: [runeId], references: [id])
  
  @@unique([participantId, slot])
}

model ParticipantStatPerk {
  id              String      @id @default(uuid())
  participantId   String
  statPerkId      Int
  position        Int         // To maintain order (0-2 typically)
  
  participant     Participant @relation(fields: [participantId], references: [id])
  statPerk        StatPerk    @relation(fields: [statPerkId], references: [id])
  
  @@unique([participantId, position])
}

model ArenaStatsAugment {
  id              String      @id @default(uuid())
  arenaStatsId    String
  augmentId       Int
  position        Int         // To maintain order of augments
  
  arenaStats      ArenaStats  @relation(fields: [arenaStatsId], references: [id])
  augment         Augment     @relation(fields: [augmentId], references: [id])
  
  @@unique([arenaStatsId, position])
}

// League Assets
model Champion {
  id            String   @id
  key           String   @unique
  name          String
  title         String
  image         Json
  skins         Json
  lore          String
  blurb         String
  allytips      String[]
  enemytips     String[]
  tags          String[]
  partype       String
  info          Json
  stats         Json
  spells        Json
  passive       Json
  recommended   String[]
  participants  Participant[]
}

model SummonerSpell {
  id            BigInt      @id
  name          String
  description   String
  summonerLevel Int
  cooldown      Int
  gameModes     Json
  iconPath      String
  participantsSpell1 Participant[] @relation("SummonerSpell1")
  participantsSpell2 Participant[] @relation("SummonerSpell2")
}

model Item {
  id            Int      @id
  name          String
  description   String
  active        Boolean
  inStore       Boolean
  from          Json?
  to            Json?
  categories    Json?
  maxStacks     Int
  price         Int
  priceTotal    Int
  iconPath      String
  
  // Relations
  participantItems ParticipantItem[]
}

model RuneTree {
  id            Int      @id
  key           String   @unique
  icon          String
  name          String
  slots         Json
  runes         Rune[]
}

model Rune {
  id            Int      @id
  key           String   @unique
  icon          String
  name          String
  shortDesc     String
  longDesc      String
  runeTreeId    Int
  slot          Int
  tier          Int
  
  runeTree      RuneTree @relation(fields: [runeTreeId], references: [id])
  
  // Relations
  participantRunes ParticipantRune[]
}

model StatPerk {
  id            Int      @id
  name          String
  desc          String
  longDesc      String
  path          String
  
  // Relations
  participantStatPerks ParticipantStatPerk[]
}

model Augment {
  id            Int      @id
  apiName       String
  calculations  Json
  dataValues    Json
  desc          String
  iconLarge     String
  iconSmall     String
  name          String
  rarity        Int
  tooltip       String
  
  // Relations
  arenaStatsAugments ArenaStatsAugment[]
}

model MatchTimeline {
  id            String   @id @default(uuid())
  matchId       String   @unique
  timelineData  Json     @map("timeline_data")
  
  // Relations
  match         Match    @relation(fields: [matchId], references: [matchId])
  
  @@map("match_timelines")
}